// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"fmt"
	"io"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type DownloadFileOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s DownloadFileOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// DownloadFileOKHeaders wraps DownloadFileOK with response headers.
type DownloadFileOKHeaders struct {
	ContentDisposition OptString
	Response           DownloadFileOK
}

// GetContentDisposition returns the value of ContentDisposition.
func (s *DownloadFileOKHeaders) GetContentDisposition() OptString {
	return s.ContentDisposition
}

// GetResponse returns the value of Response.
func (s *DownloadFileOKHeaders) GetResponse() DownloadFileOK {
	return s.Response
}

// SetContentDisposition sets the value of ContentDisposition.
func (s *DownloadFileOKHeaders) SetContentDisposition(val OptString) {
	s.ContentDisposition = val
}

// SetResponse sets the value of Response.
func (s *DownloadFileOKHeaders) SetResponse(val DownloadFileOK) {
	s.Response = val
}

func (*DownloadFileOKHeaders) downloadFileRes() {}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	// Сообщение об ошибке.
	Message string `json:"message"`
	// Код ошибки.
	Code int `json:"code"`
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() string {
	return s.Message
}

// GetCode returns the value of Code.
func (s *ErrorResponse) GetCode() int {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val string) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ErrorResponse) SetCode(val int) {
	s.Code = val
}

func (*ErrorResponse) downloadFileRes()  {}
func (*ErrorResponse) getFileStatusRes() {}
func (*ErrorResponse) uploadFileRes()    {}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResponseStatusCode) GetResponse() ErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseStatusCode) SetResponse(val ErrorResponse) {
	s.Response = val
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadStatusStatus returns new OptUploadStatusStatus with value set to v.
func NewOptUploadStatusStatus(v UploadStatusStatus) OptUploadStatusStatus {
	return OptUploadStatusStatus{
		Value: v,
		Set:   true,
	}
}

// OptUploadStatusStatus is optional UploadStatusStatus.
type OptUploadStatusStatus struct {
	Value UploadStatusStatus
	Set   bool
}

// IsSet returns true if OptUploadStatusStatus was set.
func (o OptUploadStatusStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadStatusStatus) Reset() {
	var v UploadStatusStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadStatusStatus) SetTo(v UploadStatusStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadStatusStatus) Get() (v UploadStatusStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadStatusStatus) Or(d UploadStatusStatus) UploadStatusStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type UploadFileReq struct {
	// Файл для загрузки.
	File OptMultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadFileReq) GetFile() OptMultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadFileReq) SetFile(val OptMultipartFile) {
	s.File = val
}

// Ref: #/components/schemas/UploadStatus
type UploadStatus struct {
	Status OptUploadStatusStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *UploadStatus) GetStatus() OptUploadStatusStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *UploadStatus) SetStatus(val OptUploadStatusStatus) {
	s.Status = val
}

func (*UploadStatus) getFileStatusRes() {}
func (*UploadStatus) uploadFileRes()    {}

type UploadStatusStatus string

const (
	UploadStatusStatusReady      UploadStatusStatus = "ready"
	UploadStatusStatusInProgress UploadStatusStatus = "in_progress"
	UploadStatusStatusFailed     UploadStatusStatus = "failed"
	UploadStatusStatusDeleted    UploadStatusStatus = "deleted"
)

// AllValues returns all UploadStatusStatus values.
func (UploadStatusStatus) AllValues() []UploadStatusStatus {
	return []UploadStatusStatus{
		UploadStatusStatusReady,
		UploadStatusStatusInProgress,
		UploadStatusStatusFailed,
		UploadStatusStatusDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UploadStatusStatus) MarshalText() ([]byte, error) {
	switch s {
	case UploadStatusStatusReady:
		return []byte(s), nil
	case UploadStatusStatusInProgress:
		return []byte(s), nil
	case UploadStatusStatusFailed:
		return []byte(s), nil
	case UploadStatusStatusDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UploadStatusStatus) UnmarshalText(data []byte) error {
	switch UploadStatusStatus(data) {
	case UploadStatusStatusReady:
		*s = UploadStatusStatusReady
		return nil
	case UploadStatusStatusInProgress:
		*s = UploadStatusStatusInProgress
		return nil
	case UploadStatusStatusFailed:
		*s = UploadStatusStatusFailed
		return nil
	case UploadStatusStatusDeleted:
		*s = UploadStatusStatusDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
