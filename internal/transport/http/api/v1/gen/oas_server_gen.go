// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DownloadFile implements DownloadFile operation.
	//
	// Скачивание файла по его идентификатору.
	//
	// GET /file/{id}
	DownloadFile(ctx context.Context, params DownloadFileParams) (DownloadFileRes, error)
	// GetFileStatus implements GetFileStatus operation.
	//
	// Статус загрузки файла.
	//
	// GET /file/{id}/status
	GetFileStatus(ctx context.Context, params GetFileStatusParams) (GetFileStatusRes, error)
	// UploadFile implements UploadFile operation.
	//
	// Загрузка файла на сервер.
	//
	// POST /file
	UploadFile(ctx context.Context, req *UploadFileReq) (UploadFileRes, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
